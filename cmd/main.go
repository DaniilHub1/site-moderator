package main

import (
	"fmt"
	"log"
	"path/filepath"
	"strings"
	"site-moderator/internal/analyzer"
	"site-moderator/internal/db"
	"site-moderator/internal/fetcher"
	"site-moderator/internal/llm"
	"site-moderator/internal/screenshot"
)

func main() {
	fmt.Println(" Site Moderator –∑–∞–ø—É—â–µ–Ω")

	err := analyzer.LoadKeywords("keywords.json")
	if err != nil {
		log.Fatal("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å keywords.json:", err)
	}

	err = db.LoadCSV("domains.csv")
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CSV:", err)
	}

	err = db.InitResultsDB("results.sqlite")
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:", err)
	}

	for {
		
		domains, _ := db.GetDomainsBatch(5)
		if len(domains) == 0 {
			fmt.Println("–í—Å–µ –¥–æ–º–µ–Ω—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.")
			break
		}

		for _, domain := range domains {
			url := addProtocol(domain)
			fmt.Println("üåê –û–±—Ä–∞–±–æ—Ç–∫–∞:", url)

			text, err := fetcher.CrawlSite(url, 3)
			if err != nil {
				fmt.Println("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ö–æ–¥–∞:", err)
				continue
			}

			fmt.Printf("üìÑ –°–æ–±—Ä–∞–Ω–æ —Ç–µ–∫—Å—Ç–∞: %d —Å–∏–º–≤–æ–ª–æ–≤\n", len(text))


			resultAnalyzer, foundAnalyzer := analyzer.CheckText(text)
			if foundAnalyzer {
				fmt.Printf("üö® –ù–∞—Ä—É—à–µ–Ω–∏–µ (–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä): %s\n", resultAnalyzer.Category)
				fmt.Printf("üîé –ù–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤–æ: \"%s\"\n", resultAnalyzer.Word)
				fmt.Printf("üß† –ö–æ–Ω—Ç–µ–∫—Å—Ç: ...%s...\n", strings.TrimSpace(resultAnalyzer.Context))

				if resultAnalyzer.IsSuspected {
					fmt.Println("‚ö†Ô∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Ö–æ–∂ –Ω–∞ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ (–Ω–µ —Ç–æ—á–Ω–æ)")
				}
			} else {
				fmt.Println("‚úÖ –ù–∞—Ä—É—à–µ–Ω–∏–π (–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä) –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
			}

			// –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –Ω–µ–π—Ä–æ—Å–µ—Ç—å (LLM)
			resultLLM, foundLLM := llm.CheckWithLLM(text)

			if foundLLM {
				if resultLLM.HasViolation {
					fmt.Printf("ü§ñ –ù–∞—Ä—É—à–µ–Ω–∏–µ (LLM): %s\n", resultLLM.Category)
					fmt.Printf("üîé –ù–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤–æ: \"%s\"\n", resultLLM.Word)
					fmt.Printf("üß† –ö–æ–Ω—Ç–µ–∫—Å—Ç: ...%s...\n", strings.TrimSpace(resultLLM.Context))

					if resultLLM.IsSuspected {
						fmt.Println("‚ö†Ô∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Ö–æ–∂ –Ω–∞ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ (–Ω–µ —Ç–æ—á–Ω–æ)")
					}
				} else {
					fmt.Println("‚úÖ –ù–∞—Ä—É—à–µ–Ω–∏–π (LLM) –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
				}
			} else {
				fmt.Println("‚ö†Ô∏è LLM –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
			}

			if (foundAnalyzer && resultAnalyzer.Category != "") || (foundLLM && resultLLM.HasViolation) {
				savePath := filepath.Join("screenshots", domain+".png")
				err := screenshot.TakeScreenshot(url, savePath)
				if err != nil {
					fmt.Println("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∫—Ä–∏–Ω–∞:", err)
				} else {
					fmt.Println("üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω:", savePath)
				}

				category := ""
				word := ""
				context := ""
				hasViolation := false
				explanation := ""
				imagePath := savePath

				if foundLLM && resultLLM.HasViolation {
					category = resultLLM.Category
					word = resultLLM.Word
					context = resultLLM.Context
					hasViolation = true
					if resultLLM.IsSuspected {
						explanation = "–ü–æ–¥–æ–∑—Ä–µ–Ω–∏–µ –Ω–∞ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞"
					}
				} else if foundAnalyzer && resultAnalyzer.Category != "" {
					category = resultAnalyzer.Category
					word = resultAnalyzer.Word
					context = resultAnalyzer.Context
					hasViolation = true
					if resultAnalyzer.IsSuspected {
						explanation = "–ü–æ–¥–æ–∑—Ä–µ–Ω–∏–µ –Ω–∞ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞"
					}
				}

				err = db.SaveResult(domain, category, word, context, hasViolation, explanation, imagePath)
				if err != nil {
					fmt.Println("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:", err)
				}
			} else {
				err = db.SaveResult(domain, "", "", "", false, "", "")
				if err != nil {
					fmt.Println("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:", err)
				}
			}
		}
	}
}

func addProtocol(domain string) string {
	if !strings.HasPrefix(domain, "http") {
		return "http://" + domain
	}
	return domain
}
